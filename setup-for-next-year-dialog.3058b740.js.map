{"mappings":"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","sources":["src/js/setup-for-next-year-dialog.js"],"sourcesContent":["/* eslint-disable arrow-parens */\n\nimport { apiFetchGen, appKey } from './util';\n\nconst t = TrelloPowerUp.iframe(appKey);\n\n// https://developer.atlassian.com/cloud/trello/guides/rest-api/rate-limits/\n// We can probably get away with less delay, but this is playing it safe safe.\nconst delay = 150;\nconst matchesYearLabel = /^year:(.*)/;\nconst apiFetch = apiFetchGen(t);\n\nconst toggleLoad = () => {\n  ['edit-date', 'loading-message'].forEach((id) => {\n    document.getElementById('progress-bar-fill').style.width = '0%';\n\n    const el = document.getElementById(id);\n    el.className = el.className === 'hidden' ? '' : 'hidden';\n  });\n};\n\nconst setProgressValue = (value) => {\n  const el = document.getElementById('progress-bar-fill');\n  const percent = Math.floor(1000 - (value * 1000)) / 10;\n  el.style.width = `${percent}%`;\n};\n\nconst getBoardAndCards = async () => {\n  let board = {};\n  let cards = [];\n\n  board = await t.board('all');\n  cards = await t.cards('all');\n\n  return [board, cards];\n};\n\n// eslint-disable-next-line\nconst wait = async (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst updateCards = (cards, cb, ...args) => {\n  const cardCount = cards.length;\n\n  const recEdit = async () => {\n    const card = cards.pop();\n\n    if (!card) {\n      return;\n    }\n\n    try {\n      await cb(card, ...args);\n\n      console.log('updated card', card.id);\n    } catch (e) {\n      console.error(`failed to PUT cards ${card.id}`, e);\n    }\n\n    setProgressValue(cards.length / cardCount);\n    wait(delay);\n\n    await recEdit();\n  };\n\n  return recEdit();\n};\n\nconst unsetAssigned = async () => {\n  toggleLoad();\n\n  const [board, cards] = await getBoardAndCards();\n\n  await updateCards(cards, async (card) => {\n    try {\n      await apiFetch('PUT', 'cards', {\n        id: card.id,\n      });\n\n      console.log('unset assigned for card', card.id);\n    } catch (e) {\n      console.error(`failed to PUT cards ${card.id}`, e);\n    }\n  });\n};\n\nconst editYear = async (year) => {\n  toggleLoad();\n\n  const [board, unfilteredCards] = await getBoardAndCards();\n  const { labels } = board;\n\n  const cards = unfilteredCards\n    .filter(c => c.labels.find(l => l.name === 'repeat:yearly'));\n\n  // check if the label exist\n\n  const yearLabel = `year:${year}`;\n  let yearLabelObject = (labels || []).find(l => l.name === yearLabel);\n\n  if (!yearLabelObject) {\n    try {\n      yearLabelObject = await apiFetch('POST', 'labels', {\n        name: yearLabel,\n        color: 'black',\n        idBoard: board.id,\n      });\n\n      console.log('label created', yearLabelObject);\n    } catch (e) {\n      console.error('error creating new label', e);\n\n      return;\n    }\n  } else {\n    console.log('label exists', yearLabelObject);\n  }\n\n  const cutoff = new Date(`${year}-08-01`);\n\n  // recursively update cards, waiting by delay amount\n  await updateCards(cards, async (card) => {\n    const dueDate = new Date(card.due);\n    dueDate.setFullYear(year);\n\n    // if the due date is after Aug 1, set to the previous year\n    if (dueDate > cutoff) {\n      dueDate.setFullYear(year - 1);\n    }\n\n    const idLabels = [\n      ...card.labels\n        .filter(l => !matchesYearLabel.test(l))\n        .map(l => l.id),\n      yearLabelObject.id,\n    ];\n\n    try {\n      await apiFetch('PUT', 'cards', {\n        id: card.id,\n        idLabels,\n        due: dueDate.toISOString(),\n      });\n\n      console.log('updated card', card.id);\n    } catch (e) {\n      console.error(`failed to PUT cards ${card.id}`, e);\n    }\n  });\n\n  toggleLoad();\n};\n\nwindow.unsetAssigned = () => unsetAssigned();\n\nwindow.setYear = () => {\n  const el = document.getElementById('year');\n\n  editYear(parseInt(el.value, 10));\n};\n\nwindow.closePopup = () => t.closePopup();\n\nt.render(() => {\n  t.sizeTo('body').done();\n\n  const el = document.getElementById('year');\n  el.value = (new Date()).getFullYear() + 1;\n});\n"],"names":[],"version":3,"file":"setup-for-next-year-dialog.3058b740.js.map"}